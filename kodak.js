'use strict';

const TCPBase = require('tcp-base');
const dgram = require("dgram");
const func = require('./func.js');
const resp = require('./resp.js');

class KodakBase extends TCPBase {
	constructor(options) {
		super(options);

		this.on('request', (entity) => {
			const packet = resp(entity.header, entity.data);

			print_hex(packet, 'auto echo response:');
			packet && this.send_rsp(packet, true);
		});
	}

	send_rsp(packet, oneway=false) {
		let id = this.getId(packet);

		this.send({
			id: id,
			data: packet,
			timeout: 5000,
			oneway: oneway,
		}, (err, res) => {
			if (err) {
				console.error(err);
			}
			print_hex(res, 'recv response:');
		});
	}

	getId(header) {
		return header.readInt32LE(0x8);
	}

	getBodyLength(header) {
		const block_header_size = 0x10;
		const tail_size = 0x14;
		const contents_size = header.readInt32LE(0x04);
		let block_mode = header.readInt32LE(0x1c);

		between(contents_size,0,Number.MAX_VALUE) || console.log('read buffer error');
		between(block_mode,0,Number.MAX_VALUE) || console.log('read buffer error');


		let body_size = 0;
		switch(block_mode) {
		    case 0:
			body_size = tail_size + contents_size; 
			break;
		    case 1:
			body_size = tail_size + block_header_size * 2;
			break;
		    case 2:
			body_size = tail_size + block_header_size * 3 + contents_size;
			break;
		    default:
			console.log('new block mode');
		}

		print_json({
			header_size: hexval(this.options.headerLength),
			tail_size: hexval(tail_size),
			contents_size: hexval(contents_size),
			block_mode: hexval(block_mode),
			block_header_size: hexval(block_header_size),
			body_size: hexval(body_size)
		}, 'getBodyLength:');

		return  body_size;
	}

	decode(body, header) {
		//print_hex(header, 'decode packet:');
		return {
			id: this.getId(header),
			data: body,
			header: header,
		};
	}
}

class Kodak extends KodakBase{
	initPacket() {
		let packet = new Buffer([ 
			0x2d, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 
			0xe9, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 
		]);
		print_hex(packet, 'send first packet:');
		this.send_rsp(packet);
	}

	open_web() {
		let packet = new Buffer([ 
			0x2d, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 
			0xe9, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
			0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00
		]);
		print_hex(packet, 'send open web:');
		this.send_rsp(packet);
	}

	snapshot() {
		let packet = new Buffer([ 
			0x2d, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
			0xef, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00
		]);
		print_hex(packet, 'take a snapshot:');
		this.send_rsp(packet);


	}


}

function main(config) {
	print_json(config, 'Configuration from UDP port 5176: ');

	const kodak = new Kodak({
		host: config['camera_address'],
		port: config['command_port'],
		needHeartbeat: false,
		headerLength: 0x34
	});

	kodak.initPacket();

	setTimeout(() => {kodak.open_web();}, 1000);

	setTimeout(() => {kodak.snapshot();}, 4000);

};

get_pixpro_sp360_config((config) => {main(config);});

return;

function get_pixpro_sp360_config(callback) {
	let server = dgram.createSocket('udp4');
	server.on('message', (msg, rinfo) => {
		let reply = msg.toString().split(':');
		let confs = reply[1].split(',');
		let config = {
			model : confs[0], //DV138
			unknow: parseInt(confs[1]), //1
			product_name: confs[2], //PIXPRO SP360 4K
			camera_address : confs[3], //172.16.0.254
			camera_netmask : confs[4], //255.255.255.0
			camera_mac: confs[5], //A408EA47B5D5
			stream_port: parseInt(confs[6]), //9176
			command_port: parseInt(confs[7]), //9175
			unknow1: parseInt(confs[8]), //0
			wifi_ssid: confs[9], //PIXPRO-SP360-4K_7B8B
		};
		callback(config);
		server.close();
	});
	server.bind(5176);

	let socket = dgram.createSocket("udp4");
	/*
	socket.bind(() => {
		socket.setBroadcast(true);
	});
	*/

	let message = new Buffer('AOFQUERY:WIFILIB,1');
	socket.send(message, 0, message.length, 5175, '172.16.0.255', (err) => {
		if (err) {
		       	console.log('AOFQUERY UDP message sent error.');
			process.exit(1);
		}
		socket.close();
	});
}

